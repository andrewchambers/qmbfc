use std

const main = {
	var amount
	var prog = std.try(std.fslurp(std.In))
	var jumps = [][:]
	var lblcnt = 0
	var l1, l2, l3
	
	std.put("export\n")
	std.put("function w $main() {{\n")
	std.put(" @start\n")
	std.put("  %ptr =l alloc16 4096\n")
	std.put("  %r =l call $memset(l %ptr, l 0, l 4096)\n")
	for var i = 0; i < prog.len; i++
		var c = prog[i]
		match (c : char)
		| '.':
			std.put("  %v =l loadl %ptr\n")
			std.put("  %r =l call $putchar(l %v)\n")
		| '+':
			:addsubv
			amount = 0
			while true
				match (c : char)
				| '+':
					amount += 1
				| '-':
					amount -= 1
				| _:
					i -= 1
					break
				;;
				i += 1
				if i == prog.len
					break
				;;
				c = prog[i]
			;;
			std.put("  %v =l loadl %ptr\n")
			std.put("  %v =l add %v, {}\n", amount)
			std.put("  storel %v, %ptr\n")
		| '-':
			goto addsubv
		| '[':
			l1 = lblcnt++
			l2 = lblcnt++
			l3 = lblcnt++
			std.slpush(&jumps, (l1, l3))
			std.put(" @.L{}\n", l1)
			std.put("  %v =l loadl %ptr\n")
			std.put("  jnz %v, @.L{}, @.L{}\n", l2, l3)
			std.put(" @.L{}\n", l2)
		| ']':
			if jumps.len == 0
				std.fatal("unmatched ]\n")
			;;
			(l1, l2) = std.slpop(&jumps)
			std.put("  jmp @.L{}\n", l1)
			std.put(" @.L{}\n", l2)
		| '>':
			:addsubp
			amount = 0
			while true
				match (c : char)
				| '>':
					amount += 8
				| '<':
					amount -= 8
				| _:
					i -= 1
					break
				;;
				i += 1
				if i == prog.len
					break
				;;
				c = prog[i]
			;;
			std.put("  %ptr =l add %ptr, {}\n", amount)
		| '<':
			goto addsubp
		| _:
			/* nothing */
		;;
	;;
	if jumps.len != 0
		std.fatal("unmatched [\n")
	;;
	std.put(" @end\n")
	std.put("  ret 0\n")
	std.put("}}\n")
}
